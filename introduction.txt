Brief History -
    1979 Bjarne Stroustrup

"Bjarne Stroustrup the creator / original designer and implementer of C++

C++ was designed for demanding applications requiring high performance, low energy consumption, rapid response time and reliability.

C++ is widely used in all types of applications from cameras and cell phones to the Mars Rover, in other words in nearly every industry.

C++ offers a lot of programming features and therefore enables one to learn a lot about programming.

C++ works directly with the computer's hardware and provides very powerful abstraction mechanisms."

Style guides
    Accepted conventions for how code should be formatted

It's a good idea to become familiar with C++ style guides for code formatting
    a) modern C++ Coding Guidelines
    b) Google C++ Style Guidelines

link to C++ guidelines on GitHub https://github.com/isocpp/CppCoreGuidelines

UNDERSTANDING C++ PROGRAMS

/------------------
Terms

    Class

    Command Line Interface or BASH terminal for MAC os
        User interface, used for managing files and directories relating to the C++ program being written

    Compile - command given to compile the code
        g++ main.cpp -o main.out
            g++ -  run the C++ compiler
            main.cpp - the name of the file to compile
            -o - flag to name the output file

            ./main.out - command given to run the output file main.out

    Executable code or Binary code
        machine code that is run by the computer hardware

    Object

    Object code
        code after being pre processed by the compiler

    Instance variables

    Linkage
        Internal

        External

    Methods


    Program structure
        comments
            line comment - normally a single line but can be longer
                starts with //
            block comment - used when several lines are required
                start with /*
                inner lines - optionally can begin with ** or ***
                end with */

    Namespace

    Output datatype statement

    Preprocessing directives - instructions carried out by the compiler to add or change the raw code in some way before creating the object file code

        Macros
            define new macro
            named code = macros
        Inclusion of files
            header files
            standard library files
            conditional compilation statement
            other directives

    Text Editor
        Application for creating and modifying program code and related text

    Standard library

    Working directory
        the directory (folder) where the user is currently working

        working directory - location of the files to written by the programmer for the current program
        preprocessing directive - a command that instructs the compiler to apply methods contained in the preprocessor file

/------------------

How to begin a C++ program

The first line in a C++ program begins with a (# hash symbol) indicating the start of a preprocessing directive. A preprocessing directive

The # symbol is followed by the keyword (include) which works with the next keyword specifying where to search for the item to be included.

The second keyword on this line is wrapped in either <..> or “..” which directs the compiler to look in either the local directory or or standard library for the preprocessing directive.

Double quotation marks “...” tells the compiler to look for the specified library in the current directory first and if not found there, then look in the standard (std.) libraries.

Double angle brackets  <...> tells the compiler to look for the preprocessing directory in the location of the standard libraries.

Examples:

    #include “main.hpp”
or
    #include <iostream>  ]

####
The main program:

    The main section of the program begins with a statement specifying what
    data type the program returns when it successfully compiles and runs.
    ie., return 0,

Example 1:

#include “iostream”
int main() { int at the beginning of this line specifies output data type
	...some code…;
	...some code…;
    return 0;   note: the specified data type just before the opening curly brace
                matches the data type of the return output defined on this line of
                code (0, being and integer), otherwise the program will not compile
                and will return an error specifying non matching data types
                The declaration of the return data type is followed by the closing
                curly brace.
}

Example 1:

#include “iostream”
int main() { 	// the main section of the program starts here
	...some code…;
	...some code…;
	return 0;
}  // the main section of the program ends here

or
Example 2:

#include <iostream>
int main()
{    // the main section of the program starts here
    ...some code…; // lines between curly braces end with a semicolon
	...some code…;
	return 0;
}   // the main section of the program ends here

/------------------
Adding comments:

To add a comment block:

Example 1:
/*  Start a comment block with a backslash followed by an asterix
    ...some text...
    ...some text...
    ...some text...
    ...some text...
*/  End a comment block with a asterix followed by a backslash

Example 2:
/*
    **  double
    *** or triple asterix can be used
    *** to make inner comment block
    **  lines standout
*/

Single line comments:

// single line comments begin with two backslashes

/------------------

Assignment symbol:
    =  assign values to a variable using an equals sign

Assigning values to strings variables:

Example:
variableName = “some string”  // note: wrap stings in double quotes

Assigning numerical values to variables:
Example:
variableName = 20196378  // note: numbers aren't enclosed in quotes

------------------------------------------------------------------------
Sending output to the console:

	Example 1: */
    #include <iostream>
    int main()
    {
	…. some code….;
	std::cout<<”Hello World”;   // using the std::cout<< method
	return 0;
    }

// It's possible to avoid typing std:: each time by inserting: using namespace std;

    Example 2:

    #include <iostream>

    using namespace std;  // note: on larger programs with many lines of code this shortcut may introduce conflicts among various libraries

    int main()
    {
	   …. some code….;
       cout<<”some text output”; // note std:: can be omitted when inserting:  using namespace std: as shown above
	    return 0;
    }

------------------------------------------------------------------------
String output:
	#include <iostream>

############## revise next !!!!!!!!!!!!!!!
using namespace std; // note: using the call to namespace here
int main()
{
	…. some code….;
cout<<”a string produces character output”; // note std:: has been omitted
std::cout<<”Hello World”; // prints Hello World to the console
	return 0;
}

*/
