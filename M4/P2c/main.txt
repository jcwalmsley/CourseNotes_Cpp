/*
    Additional information on switch statements:
    from https://en.cppreference.com/w/cpp/language/switch

    The body of a switch statement may have an arbitrary number of case: labels, as long as the values of all constant_expressions are unique (after conversions/promotions). At most one default: label may be present (although nested switch statements may use their own default: labels or have case: labels whose constants are identical to the ones used in the enclosing switch)

    If condition evaluates to the value that is equal to the value of one of constant_expressions, then control is transferred to the statement that is labeled with that constant_expression.

    If condition evaluates to the value that doesn't match any of the case: labels, and the default: label is present, control is transferred to the statement labeled with the default: label.

    The break statement, when encountered in statement exits the switch statement:

    Examples of incorrect and correct switch statement formatting:

*/
/*
#include <iostream>

int main()
{
    switch(1)
    {
        case 1: int x = 0; // initialization
        std::cout << x << '\n';
        break;
        default: // compilation error: jump to default: would enter\
        the scope of 'x'
        // without initializing it
        std::cout << "default\n";
        break;
    }
    switch(1)
    {
        case 1: {  int x = 0;
        std::cout << x << '\n';
        break;
    } // scope of 'x' ends here
    default: std::cout << "default\n"; // no error
    break;
}
*/
